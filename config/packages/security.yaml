security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            id: App\Module\User\Infrastructure\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/web/login
            stateless: true
            json_login:
                check_path: /api/web/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api/web
            stateless: true
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/web/token/refresh
            provider: app_user_provider
            user_checker: App\Module\User\Infrastructure\Security\UserChecker
        app:
            pattern: ^/api/app
            lazy: true
            stateless: true
            access_token:
                token_handler: App\Module\User\Infrastructure\Security\AccessTokenHandler
        admin:
            pattern: ^/api/admin
            stateless: true
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/web/token/refresh
            provider: app_user_provider
            user_checker: App\Module\User\Infrastructure\Security\UserChecker

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/web/(register|login|token/refresh), roles: PUBLIC_ACCESS }
        - { path: ^/api/app/(login|register), roles: PUBLIC_ACCESS }
        - { path: ^/api/(forgot-password|reset-password), roles: PUBLIC_ACCESS }
        - { path: ^/api/web/, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/app/, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/admin/, roles: [ ROLE_ADMIN ] }

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
